/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backend;

import static backend.Config.LAST_DIR;
import backend.expr.ExprLogOperation;
import backend.handle.Category;
import backend.operation.LogOperation;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;
import org.json.simple.JSONValue;

/**
 *
 * @author Salm
 */
public class Backend extends javax.swing.JFrame {
    private final UniqueListModel fileModel = new UniqueListModel();
    private RSyntaxTextArea txaQuery;
    private LogOperation currentOp = null;

    /**
     * Creates new form Backend
     */
    public Backend() {
        initComponents();
        Config.loadConfigs();
        initJSONEditor();
        this.lstLogFile.setModel(fileModel);
        this.initCategoriesCBB();
        switchMode(MODE.IDLE);
    }
    
    private void initJSONEditor()
    {
        this.txaDesc.setVisible(false);
        txaQuery = new RSyntaxTextArea();
        txaQuery.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSP);
//        txaQuery.co(true);
        RTextScrollPane sp = new RTextScrollPane(txaQuery);
        sp.setBounds(this.txaDesc.getBounds());
        this.txaDesc.getParent().add(sp);
        
        String defQuery = "{\n" +
        "	\"category\" : \"HANHDONG\",\n" +
        "	\"$filter\" : {\n" +
        "	},\n" +
        "	\"$map\" : [],\n" +
        "	\"$reduce\" : [\n" +
        "	]\n" +
        "}";
        txaQuery.setText(defQuery);
    }
    
    private void initCategoriesCBB()
    {
        for (Category ct : Category.values())
        {
            this.cbbxCtgr.addItem(ct);
        }
        this.cbbxCtgr.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstLogFile = new javax.swing.JList();
        btnAddFile = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnAddFolder = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaDesc = new javax.swing.JTextArea();
        prgBar = new javax.swing.JProgressBar();
        btnRun = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaOutput = new javax.swing.JTextArea();
        cbbxCtgr = new javax.swing.JComboBox();
        btnLoadQuery = new javax.swing.JButton();
        btnSaveQuery = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(lstLogFile);

        btnAddFile.setText("Add");
        btnAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnAddFolder.setText("Add Dir");
        btnAddFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFolderActionPerformed(evt);
            }
        });

        txaDesc.setColumns(20);
        txaDesc.setLineWrap(true);
        txaDesc.setRows(5);
        jScrollPane2.setViewportView(txaDesc);

        prgBar.setStringPainted(true);

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        txaOutput.setColumns(20);
        txaOutput.setRows(5);
        jScrollPane3.setViewportView(txaOutput);

        btnLoadQuery.setText("Load");
        btnLoadQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadQueryActionPerformed(evt);
            }
        });

        btnSaveQuery.setText("Save");
        btnSaveQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQueryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(66, 66, 66)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prgBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRun)
                        .addGap(5, 5, 5)
                        .addComponent(btnStop))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cbbxCtgr, 0, 612, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLoadQuery)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveQuery)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSaveQuery, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbbxCtgr, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnLoadQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddFile)
                        .addComponent(btnClear))
                    .addComponent(prgBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddFolder)
                    .addComponent(btnRun)
                    .addComponent(btnStop))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fChooser = new JFileChooser(LAST_DIR);
        fChooser.setMultiSelectionEnabled(true);
//        fChooser.setFileFilter(new FileNameExtensionFilter("LOG File",""));
        if (fChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        LAST_DIR = fChooser.getCurrentDirectory().getAbsolutePath();
        File[] files = fChooser.getSelectedFiles();
        for (File f : files) {
            if (isLogFile(f))
            {
                try {
                    this.fileModel.add(f.getCanonicalPath());
                } catch (IOException ex) {
//                    Logger.getLogger(Backend.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnAddFileActionPerformed

    private void btnAddFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFolderActionPerformed
        // TODO add your handling code here:
        JFileChooser fChooser = new JFileChooser(LAST_DIR);
        fChooser.setMultiSelectionEnabled(true);
        fChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//        fChooser.setFileFilter(new FileNameExtensionFilter("LOG File",""));
        if (fChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        LAST_DIR = fChooser.getCurrentDirectory().getAbsolutePath();
        File[] dirs = fChooser.getSelectedFiles();
        for (File d : dirs) {
            if (d.exists() && d.isDirectory())
            {
                File[] files = d.listFiles();
                for (File f : files) {
                    try {
                        if (this.isLogFile(f))
                        {
                            this.fileModel.add(f.getCanonicalPath());
                        }
                    } catch (IOException ex) {
    //                    Logger.getLogger(Backend.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnAddFolderActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        this.fileModel.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        // TODO add your handling code here:
        try
        {
            List<File> files = new ArrayList(fileModel.getSize());
            this.fileModel.getAll().stream().forEach((fn) -> files.add(new File(fn)));
            String js = this.txaQuery.getText();

            Map<?, ?> m = (Map) JSONValue.parse(js);
            Category ctgr = Category.valueOf((String) m.get("category"));
            LogOperation op = new ExprLogOperation(ctgr, files, m);

            op.addEventListener(ExprLogOperation.EVENT_TYPE.TASK_COMPLETED, (e) -> {
                System.out.println("Complete " + e.getParam());
                this.prgBar.setValue((Integer) e.getParam());
            });
            op.addEventListener(ExprLogOperation.EVENT_TYPE.DONE, (e) -> {
                StringBuilder sb = new StringBuilder();
                Map<Object, Object> data = (Map) e.getParam();
                render(data, sb, true);

                this.txaOutput.setText(sb.toString());
                this.txaOutput.selectAll();
                this.switchMode(MODE.IDLE);
            });
            op.addEventListener(ExprLogOperation.EVENT_TYPE.ERROR, (e) -> {
                this.btnStopActionPerformed(null);
                JOptionPane.showMessageDialog(this, e.getParam().toString(), "Error", JOptionPane.ERROR_MESSAGE);
            });
            this.prgBar.setValue(0);
            this.prgBar.setMaximum(files.size());
            this.currentOp = op;
            switchMode(MODE.RUNNING);
            op.run();
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            this.btnStopActionPerformed(null);
        }
    }//GEN-LAST:event_btnRunActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        if (this.currentOp != null)
        {
            this.currentOp.stop();
            this.switchMode(MODE.IDLE);
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnLoadQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadQueryActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(Config.LAST_Q_DIR);
        fc.addChoosableFileFilter(new FileNameExtensionFilter("*.json", "json"));
        
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        File file = fc.getSelectedFile();
        Config.LAST_Q_DIR = file.getParent();
        
        try {
            String query = new String(Files.readAllBytes(file.toPath()));
            this.txaQuery.setText(query);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoadQueryActionPerformed

    private void btnSaveQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQueryActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(Config.LAST_Q_DIR);
        fc.addChoosableFileFilter(new FileNameExtensionFilter("*.json", "json"));
        
        if (fc.showSaveDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        String fName = fc.getSelectedFile().toString();
        if (!fName.endsWith(".json"))
            fName += ".json";
        File file = new File(fName);
        
        Config.LAST_Q_DIR = file.getParent();
        if (file.exists())
        {
            int sel = JOptionPane.showConfirmDialog(this, "Do you want to overwirte file " + file + "?",
                    "Overwrite??", JOptionPane.YES_NO_OPTION);
            if (sel != JOptionPane.YES_OPTION)
                return;
            
            file.delete();
        }
        
        String query = this.txaQuery.getText();
        try (FileWriter fw = new FileWriter(file)) {
            fw.write(query);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveQueryActionPerformed

    private boolean isLogFile(File f)
    {
        return f.exists() && f.isFile() && !f.getName().contains(".");
    }
    
    private static enum MODE
    {
        RUNNING,
        IDLE
    }
    private void switchMode(MODE mode)
    {
        switch (mode)
        {
            case RUNNING:
                this.btnAddFile.setEnabled(false);
                this.btnAddFolder.setEnabled(false);
                this.btnClear.setEnabled(false);
                this.btnRun.setEnabled(false);
                this.btnStop.setEnabled(true);
                break;
            case IDLE:
                this.btnAddFile.setEnabled(true);
                this.btnAddFolder.setEnabled(true);
                this.btnClear.setEnabled(true);
                this.btnRun.setEnabled(true);
                this.btnStop.setEnabled(false);
                break;
        }
    }
    
    private void render(Object data, StringBuilder sb, boolean endl)
    {
        if (data instanceof Map)
        {
            Map<?, ?> m = (Map) data;
            m.forEach((k, v) -> {
                render(k, sb, false);
                render(v, sb, false);
                if (endl)
                {
                    sb.append('\n');
                }
            });
            
        }
        else if (data instanceof Iterable)
        {
            Iterable<?> ii = (Iterable) data;
            for (Object o : ii) {
                render(o, sb, false);
                if (endl)
                {
                    sb.append('\n');
                }
            }
        }
        else
        {
            sb.append(data).append('\t');
            if (endl)
            {
                sb.append('\n');
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Backend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Backend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Backend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Backend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Backend().setVisible(true);
            }
        });
        
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            Config.saveConfigs();
        }));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFile;
    private javax.swing.JButton btnAddFolder;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLoadQuery;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSaveQuery;
    private javax.swing.JButton btnStop;
    private javax.swing.JComboBox cbbxCtgr;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList lstLogFile;
    private javax.swing.JProgressBar prgBar;
    private javax.swing.JTextArea txaDesc;
    private javax.swing.JTextArea txaOutput;
    // End of variables declaration//GEN-END:variables
}
